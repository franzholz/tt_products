--- ../../../control/class.tx_ttproducts_control_creator.php	2024-03-21 17:12:19.935138163 +0100
+++ Creator.php	2024-09-10 18:29:47.590701144 +0200
@@ -1,8 +1,11 @@
 <?php
+
+declare(strict_types=1);
+
 /***************************************************************
 *  Copyright notice
 *
-*  (c) 2012 Franz Holzinger (franz@ttproducts.de)
+*  (c) 2018 Franz Holzinger (franz@ttproducts.de)
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
@@ -36,28 +39,42 @@
  * @package TYPO3
  * @subpackage tt_products
  */
+namespace JambageCom\TtProducts\Controller\Base;
 
 use Psr\Http\Message\ServerRequestInterface;
-use TYPO3\CMS\Core\Http\ApplicationType;
 use TYPO3\CMS\Core\Core\Environment;
+use TYPO3\CMS\Core\Http\ApplicationType;
+use TYPO3\CMS\Core\Resource\FileRepository;
 use TYPO3\CMS\Core\SingletonInterface;
 use TYPO3\CMS\Core\Utility\ExtensionManagementUtility;
 use TYPO3\CMS\Core\Utility\GeneralUtility;
 use TYPO3\CMS\Core\Utility\MathUtility;
+use TYPO3\CMS\Core\Utility\VersionNumberUtility;
 
 use JambageCom\Div2007\Api\OldStaticInfoTablesApi;
 use JambageCom\Div2007\Api\StaticInfoTablesApi;
 
 use JambageCom\TtProducts\Api\BasketApi;
+use JambageCom\TtProducts\Api\BasketItemViewApi;
 use JambageCom\TtProducts\Api\ControlApi;
 use JambageCom\TtProducts\Api\Localization;
+use JambageCom\TtProducts\Api\ParameterApi;
+use JambageCom\TtProducts\Api\VariantApi;
 
 
-class tx_ttproducts_control_creator implements SingletonInterface
+class Creator implements SingletonInterface
 {
+    public function __construct(
+        private readonly FileRepository $fileRepository,
+    ) {}
+
+    public function getFileRepository() {
+        return $this->fileRepository;
+    }
+
     public function init(
-        &$conf,
-        &$config,
+        array &$conf,
+        array &$config,
         $pObj,
         $cObj,
         $ajax,
@@ -65,24 +82,38 @@
         array $recs = [],
         array $basketRec = []
     ): bool {
+        // 	debug ($conf, '$conf Creator::init');
+        debug($recs, '$recs Creator::init');
+        debug($basketRec, '$basketRec Creator::init');
+
+        $basketApi = GeneralUtility::makeInstance(BasketApi::class);
+        $variantApi = GeneralUtility::makeInstance(VariantApi::class);
+        $parameterApi = GeneralUtility::makeInstance(ParameterApi::class);
+        $request = $parameterApi->getRequest();
+
         if (version_compare(PHP_VERSION, '8.0.0') >= 0) {
             $staticInfoApi = GeneralUtility::makeInstance(StaticInfoTablesApi::class);
         } else {
             $staticInfoApi = GeneralUtility::makeInstance(OldStaticInfoTablesApi::class);
         }
 
-        $basketApi = GeneralUtility::makeInstance(BasketApi::class);
         $useStaticInfoTables = $staticInfoApi->init();
 
         if (!empty($conf['PIDstoreRoot'])) {
             $config['storeRootPid'] = $conf['PIDstoreRoot'];
+            debug($config['storeRootPid'], '$config[\'storeRootPid\'] Pos 2');
         } elseif (
-            ($GLOBALS['TYPO3_REQUEST'] ?? null) instanceof ServerRequestInterface &&
-            ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend()
+            $request instanceof ServerRequestInterface
+            &&
+            ApplicationType::fromRequest($GLOBALS['TYPO3_REQUEST'])->isFrontend() &&
+            isset($GLOBALS['TSFE']->tmpl->rootLine) &&
+            is_array($GLOBALS['TSFE']->tmpl->rootLine)
         ) {
             foreach ($GLOBALS['TSFE']->tmpl->rootLine as $k => $row) {
+                // 			debug ($row, '$row aus Rootline');
                 if ($row['doktype'] == 1) {
                     $config['storeRootPid'] = $row['uid'];
+                    debug($config['storeRootPid'], '$config[\'storeRootPid\'] Pos 3');
                     break;
                 }
             }
@@ -101,13 +132,17 @@
         ) {
             $conf['errorLog'] = '';
         } elseif ($conf['errorLog']) {
-            $conf['errorLog'] = GeneralUtility::resolveBackPath(Environment::getLegacyConfigPath() . '/../' . $conf['errorLog']);
+            $conf['errorLog'] = GeneralUtility::resolveBackPath(Environment::getLegacyConfigPath() . '../' . $conf['errorLog']);
         }
 
-        $tmp = $cObj->stdWrap($conf['pid_list'] ?? '', $conf['pid_list.'] ?? '');
-        $pid_list = (!empty($cObj->data['pages']) ? $cObj->data['pages'] : (!empty($conf['pid_list.']) ? trim($tmp) : ''));
+        $wrap = $cObj->stdWrap($conf['pid_list'] ?? '', $conf['pid_list.'] ?? '');
+        $pid_list = (!empty($cObj->data['pages']) ? $cObj->data['pages'] : (!empty($conf['pid_list.']) ? trim($wrap) : ''));
+        debug($pid_list, '$pid_list Pos 1');
         $pid_list = ($pid_list ?: $conf['pid_list'] ?? '');
+        debug($pid_list, '$pid_list Pos 2');
+        //         debug ($config['storeRootPid'], '$config[\'storeRootPid\']');
         $config['pid_list'] = ($pid_list ?? $config['storeRootPid'] ?? 0);
+        debug($config['pid_list'], 'init $config[\'pid_list\']');
 
         $recursive = (!empty($cObj->data['recursive']) ? $cObj->data['recursive'] : $conf['recursive'] ?? 99);
         $config['recursive'] = MathUtility::forceIntegerInRange($recursive, 0, 100);
@@ -117,26 +152,30 @@
         } else {
             $pLangObj = $this;
         }
-        $languageObj = static::getLanguageObj($pLangObj, $cObj, $conf);
-        $config['LLkey'] = $languageObj->getLocalLangKey();
-
         $tablesObj = GeneralUtility::makeInstance('tx_ttproducts_tables');
+        $languageObj = static::getLanguageObj($pLangObj, $cObj, $conf);
         $markerObj = GeneralUtility::makeInstance('tx_ttproducts_marker');
+        $piVars = $parameterApi->getPiVars();
         $result = $markerObj->init(
             $conf,
-            tx_ttproducts_model_control::getPiVars()
+            $piVars['backPID'] ?? $parameterApi->getParameter('backPID')
         );
 
         if ($result == false) {
             $errorCode = $markerObj->getErrorCode();
+            debug($errorCode, '$errorCode');
 
             return false;
         }
-        tx_ttproducts_control_basket::init(
+
+        $feUserRecord = $request->getAttribute('frontend.user')->user;
+
+        \tx_ttproducts_control_basket::init(
             $conf,
             $tablesObj,
             $config['pid_list'],
             $conf['useArticles'] ?? 3,
+            $feUserRecord,
             $recs,
             $basketRec
         );
@@ -144,39 +183,67 @@
         // corrections in the Setup:
         if (
             ExtensionManagementUtility::isLoaded('voucher') &&
-            isset($conf['gift.']['type']) &&
+            isset($conf['gift.']) &&
             $conf['gift.']['type'] == 'voucher'
         ) {
             $conf['table.']['voucher'] = 'tx_voucher_codes';
         }
 
+        $config['LLkey'] = $languageObj->getLocalLangKey(); // $pibaseObj->LLkey;
+
         $cnfObj = GeneralUtility::makeInstance('tx_ttproducts_config');
         $cnfObj->init(
             $conf,
             $config
         );
+        $tableDesc = $cnfObj->getTableDesc('tt_products');
+        $variantConf = ($tableDesc['variant.'] ?? []);
+
+        $selectableArray = '';
+        $selectableFieldArray = [];
+        $firstVariantArray = '';
+        $variantApi->getParams(
+            $selectableArray,
+            $selectableFieldArray,
+            $firstVariantArray,
+            $conf,
+            $variantConf
+        );
+        //         debug ($variantConf, '$variantConf');
+        $variantApi->storeVariantConf($variantConf);
+        $variantApi->storeSelectable($selectableArray);
+        $variantApi->setSelectableFieldArray($selectableFieldArray);
+        $variantApi->storeFirstVariant($firstVariantArray);
+
+        $variantApi->init(
+            $variantConf,
+            $conf['useArticles'] ?? 3,
+            $selectableArray,
+            $firstVariantArray
+        );
 
         ControlApi::init($conf, $cObj);
-        $infoArray = tx_ttproducts_control_basket::getStoredInfoArray();
+        $infoArray = \tx_ttproducts_control_basket::getStoredInfoArray();
+        debug ($infoArray, '$infoArray tx_ttproducts_control_basket::getStoredInfoArray');
         if (!empty($conf['useStaticInfoCountry'])) {
-            tx_ttproducts_control_basket::setCountry(
+            \tx_ttproducts_control_basket::setCountry(
                 $infoArray,
                 $basketApi->getBasketExtra()
             );
         }
 
-        tx_ttproducts_control_basket::addLoginData(
+        \tx_ttproducts_control_basket::addLoginData(
             $infoArray,
             $conf['loginUserInfoAddress'] ?? 0,
-            $conf['useStaticInfoCountry'] ?? 0
+            $conf['useStaticInfoCountry'] ?? 0,
+            $feUserRecord
         );
 
-        tx_ttproducts_control_basket::setInfoArray($infoArray);
+        \tx_ttproducts_control_basket::setInfoArray($infoArray);
 
         // price
         $priceObj = GeneralUtility::makeInstance('tx_ttproducts_field_price');
         $priceObj->init(
-            $cObj,
             $conf
         );
         $priceViewObj = GeneralUtility::makeInstance('tx_ttproducts_field_price_view');
@@ -186,7 +253,7 @@
 
         // image
         $imageObj = GeneralUtility::makeInstance('tx_ttproducts_field_image');
-        $imageObj->init($cObj);
+        $imageObj->init($this->fileRepository);
 
         // image view
         $imageViewObj = GeneralUtility::makeInstance('tx_ttproducts_field_image_view');
@@ -206,6 +273,8 @@
             $templateObj->setTemplateSuffix($config['templateSuffix']);
         }
 
+        $basketItemViewApi = GeneralUtility::makeInstance(BasketItemViewApi::class, $conf);
+
         // Call all init hooks
         if (
             isset($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][TT_PRODUCTS_EXT]['init']) &&
@@ -262,6 +331,6 @@
 
     public function destruct(): void
     {
-        tx_ttproducts_control_basket::destruct();
+        \tx_ttproducts_control_basket::destruct();
     }
 }
